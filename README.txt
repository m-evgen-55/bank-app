Application Description:
The application imitates the work of a bank.
It is possible to create a new clientEntity. He must provide his full name and age. The clientEntity must be at least 18 old.
Also implemented the ability to perform a number of operations on the clientEntity:
- get the clientEntity object by Id;
- delete a clientEntity;
- get a list of clientEntity's accounts
- get a list of clientEntity's loans.
When deleting a clientEntity, check for outstanding loans from the clientEntity. If they are present, then the clientEntity cannot be deleted.
When a clientEntity is deleted, all related bills and loans.
The clientEntity can open an accountEntity and perform a number of operations on the accountEntity:
- put money into the accountEntity;
- withdraw money from the accountEntity;
- get the invoice object by Id; 
- get Id of the clientEntity to which the invoice is linked by the invoice Id,
- delete the invoice.
The clientEntity can apply for a loan. There is a little logic for loan encouragement (see LoanServiseImpl).
Implemented the ability to make a payment on a loan, as well as to get the Id of the clientEntity to which it is attached by the Id of the loan
this loan.
All data is stored in the database.

Too match mapping (e.g. AccountEntity to Account, LoanEntity to Loan) is not nessesary here. It's just shows best practise mvc layers architecture
and reduces coupling between layers.

In application.properties add your db username and password.






CREATE TABLE public."clients" (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name varchar NOT NULL,
	email varchar NOT NULL,
	birth_date date NOT NULL,
	CONSTRAINT clients_id_pk PRIMARY KEY (id)
);

COMMENT ON COLUMN public."clients".name IS 'User name';
COMMENT ON COLUMN public."clients".email IS 'User email';
COMMENT ON COLUMN public."clients".birth_date IS 'User birth date';




CREATE TABLE public."accounts" (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	balance bigint NOT NULL,
	client_id bigint NOT NULL,
	CONSTRAINT accounts_id_pk PRIMARY KEY (id),
	FOREIGN KEY (client_id) REFERENCES clients (id)
);

COMMENT ON COLUMN public."accounts".balance IS 'Balance of account';
COMMENT ON COLUMN public."accounts".client_id IS 'Client reference id';





CREATE TABLE public."loans" (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	sum bigint NOT NULL,
	rate int NOT NULL,
	overpayment bigint not null,
	duration int not null,
	return_sum bigint not null,
	is_paid_off boolean not null,
	client_id bigint NOT NULL,
	CONSTRAINT loans_id_pk PRIMARY KEY (id),
	FOREIGN KEY (client_id) REFERENCES clients (id)
);

COMMENT ON COLUMN public."loans".sum IS 'Sum of loan';
COMMENT ON COLUMN public."loans".rate IS 'Rate of loan';
COMMENT ON COLUMN public."loans".overpayment IS 'Overpayment of loan';
COMMENT ON COLUMN public."loans".duration IS 'Duration of loan in months';
COMMENT ON COLUMN public."loans".return_sum IS 'Sum which must be returned';
COMMENT ON COLUMN public."loans".is_paid_off IS 'Is loan paid off';
COMMENT ON COLUMN public."loans".client_id IS 'Client reference id';


